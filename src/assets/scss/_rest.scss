//------------------------------定义颜色
//$colorKey表示键，$color表示颜色值
@each $colorKey, $color in $colors {
    .text-#{$colorKey} {
        color: $color;
    }
    .bg-#{$colorKey} {
        background-color: $color;
    }
}
//------------------------------text-align 对齐方式
@each $var in (left, center, right) {
    .text-#{$var} {
        text-align: $var;
    }
}
//------------------------------font size
//生成字体大小
@each $sizeKey, $size in $font-sizes {
    .fs-#{$sizeKey} {
        font-size: $size * $base-font-size;
    }
}
//------------------------------flex
.d-flex {
    display: flex;
}
//默认是水平的，column垂直方向的
.flex-column {
    flex-direction: column;
}
$flex-jc: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "between": space-between,
    "around": space-around,
    "stretch": stretch,
);
@each $key, $value in $flex-jc {
    .jc-#{$key} {
        justify-content: $value;
    }
}
$flex-ai: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "stretch": stretch,
);
@each $key, $value in $flex-ai {
    .ai-#{$key} {
        align-items: $value;
    }
}

//让所有弹性盒模型对象的子元素都有相同的长度，且忽略它们内部的内容；作用在display:flex的子元素
.flex-1 {
    flex: 1;
}

//flex-grow 属性用于设置或检索弹性盒子的扩展比率
.flex-grow-1 {
    flex-grow: 1;
}

//弹性盒子，子元素换行方式
$flexWraps: (
    "nowrap": nowrap,
    "wrap": wrap,
    "reverse": wrap-reverse,
);
@each $wrapKey, $var in $flexWraps {
    .fWrap-#{$wrapKey} {
        flex-wrap: $var;
    }
}

//------------------------------spacing
//.mt-0 => margin-top level 0
@each $typeKey, $type in $spacing-types {
    //.m-0{margin: 0px}
    @each $sizeKey, $size in $spacing-sizes {
        .#{$typeKey}-#{$sizeKey} {
            #{$type}: $size * $spacing-base-size;
        }
    }
    //.mx-0  .my-0
    @each $sizeKey, $size in $spacing-sizes {
        .#{$typeKey}x-#{$sizeKey} {
            #{$type}-left: $size * $spacing-base-size;
            #{$type}-right: $size * $spacing-base-size;
        }
        .#{$typeKey}y-#{$sizeKey} {
            #{$type}-top: $size * $spacing-base-size;
            #{$type}-bottom: $size * $spacing-base-size;
        }
    }
    //.mt-0{margin-top: 0px}
    @each $directionKey, $direction in $spacing-directions {
        @each $sizeKey, $size in $spacing-sizes {
            .#{$typeKey}#{$directionKey}-#{$sizeKey} {
                #{$type}-#{$direction}: $size * $spacing-base-size;
            }
        }
    }
}
//------------------------------display
$displays: (
    "inline": inline,
    "inblock": inline-block,
    "block": block,
);
@each $key, $var in $displays {
    .d-#{$key} {
        display: $var;
    }
}
//------------------------------float
$floats: (left, right);
@each $var in $floats {
    .f-#{$var} {
        float: $var;
    }
}
//------------------------------清除浮动
.clear {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}
//------------------------------width % height %
$whPer: (1, 2, 3, 4, 5);
@each $var in $whPer {
    .widthPer-#{$var} {
        width: calc(100% / #{$var});
    }
    .heightPer-#{$var} {
        height: calc(100% / #{$var});
    }
}

